// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PaperSquare.Data.Data;

#nullable disable

namespace PaperSquare.Data.Migrations
{
    [DbContext(typeof(PaperSquareDbContext))]
    partial class PaperSquareDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PaperSquare.Core.Models.Identity.RefreshToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsValid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken", (string)null);
                });

            modelBuilder.Entity("PaperSquare.Core.Models.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9813ad52-51e2-431b-8116-2e77fdf79b33",
                            ConcurrencyStamp = "c413c738-8402-49ea-a52e-0db396a612a5",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "f6b5c6c9-3f5c-4a91-bc4d-a91825243fba",
                            ConcurrencyStamp = "cbe1b56d-c28d-4023-95ff-ed835870fbc4",
                            Name = "RegisteredUser",
                            NormalizedName = "REGISTEREDUSER"
                        },
                        new
                        {
                            Id = "9709d04b-71b0-4874-9ca1-bc4e70e64298",
                            ConcurrencyStamp = "df7e8015-80c9-4428-8372-74ce0e6e16e8",
                            Name = "Editor",
                            NormalizedName = "EDITOR"
                        },
                        new
                        {
                            Id = "c2444b71-c794-4e42-8ec9-25a65ff3abeb",
                            ConcurrencyStamp = "2cb2edf4-0574-4285-b7f6-c827d2906d6b",
                            Name = "Guest",
                            NormalizedName = "GUEST"
                        });
                });

            modelBuilder.Entity("PaperSquare.Core.Models.Identity.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim", (string)null);
                });

            modelBuilder.Entity("PaperSquare.Core.Models.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1a7726f8-de89-465e-a761-6f7597a8d6bd",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1991, 7, 6, 19, 11, 8, 899, DateTimeKind.Unspecified).AddTicks(6738),
                            ConcurrencyStamp = "efc45564-59cd-4bcc-a3cd-265b3cb5b6ce",
                            CreationDate = new DateTime(2017, 4, 22, 23, 41, 11, 275, DateTimeKind.Unspecified).AddTicks(1470),
                            Email = "Matt_Kemmer@yahoo.com",
                            EmailConfirmed = false,
                            Firstname = "Matt",
                            IsDeleted = false,
                            Lastname = "Kemmer",
                            LockoutEnabled = false,
                            NormalizedEmail = "MATT_KEMMER@YAHOO.COM",
                            NormalizedUserName = "MATT_KEMMER",
                            PasswordHash = "AQAAAAEAACcQAAAAECKfk8fF5yZ4plu8y1vPtzMs/u8dlOOq0zuPKb1uKKDKRuxUFhSb2HUaBFLUEYe0EA==",
                            PhoneNumber = "Bogus.DataSets.PhoneNumbers",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VJWEG644FKWZHWEQSDTECNTWRMOX3YFN",
                            TwoFactorEnabled = false,
                            UserName = "Matt_Kemmer"
                        },
                        new
                        {
                            Id = "b5a7f7b0-a408-4bc2-b7a3-4ef6a04a30cd",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1988, 4, 5, 2, 54, 32, 425, DateTimeKind.Unspecified).AddTicks(3585),
                            ConcurrencyStamp = "efc45564-59cd-4bcc-a3cd-265b3cb5b6ce",
                            CreationDate = new DateTime(2019, 8, 9, 9, 50, 14, 223, DateTimeKind.Unspecified).AddTicks(4152),
                            Email = "Sarina_Olson@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Sarina",
                            IsDeleted = false,
                            Lastname = "Olson",
                            LockoutEnabled = false,
                            NormalizedEmail = "SARINA_OLSON@GMAIL.COM",
                            NormalizedUserName = "SARINA_OLSON",
                            PasswordHash = "AQAAAAEAACcQAAAAECKfk8fF5yZ4plu8y1vPtzMs/u8dlOOq0zuPKb1uKKDKRuxUFhSb2HUaBFLUEYe0EA==",
                            PhoneNumber = "Bogus.DataSets.PhoneNumbers",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "VJWEG644FKWZHWEQSDTECNTWRMOX3YFN",
                            TwoFactorEnabled = false,
                            UserName = "Sarina_Olson"
                        },
                        new
                        {
                            Id = "e411687a-67b5-47b7-bac5-443d814341f4",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1989, 7, 22, 10, 4, 24, 926, DateTimeKind.Unspecified).AddTicks(7982),
                            ConcurrencyStamp = "efc45564-59cd-4bcc-a3cd-265b3cb5b6ce",
                            CreationDate = new DateTime(2010, 7, 14, 19, 45, 16, 505, DateTimeKind.Unspecified).AddTicks(155),
                            Email = "Austin_Brekke93@gmail.com",
                            EmailConfirmed = false,
                            Firstname = "Austin",
                            IsDeleted = true,
                            Lastname = "Brekke",
                            LockoutEnabled = false,
                            NormalizedEmail = "AUSTIN_BREKKE93@GMAIL.COM",
                            NormalizedUserName = "AUSTIN_BREKKE",
                            PasswordHash = "AQAAAAEAACcQAAAAECKfk8fF5yZ4plu8y1vPtzMs/u8dlOOq0zuPKb1uKKDKRuxUFhSb2HUaBFLUEYe0EA==",
                            PhoneNumber = "Bogus.DataSets.PhoneNumbers",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VJWEG644FKWZHWEQSDTECNTWRMOX3YFN",
                            TwoFactorEnabled = false,
                            UserName = "Austin_Brekke"
                        },
                        new
                        {
                            Id = "ecc02ce1-8fe0-41dc-8daa-52e6f6c8ccb3",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2000, 10, 30, 1, 44, 29, 435, DateTimeKind.Unspecified).AddTicks(968),
                            ConcurrencyStamp = "efc45564-59cd-4bcc-a3cd-265b3cb5b6ce",
                            CreationDate = new DateTime(2014, 2, 7, 20, 7, 11, 161, DateTimeKind.Unspecified).AddTicks(9676),
                            Email = "Sunny22@hotmail.com",
                            EmailConfirmed = false,
                            Firstname = "Sunny",
                            IsDeleted = false,
                            Lastname = "Waters",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUNNY22@HOTMAIL.COM",
                            NormalizedUserName = "SUNNY_WATERS",
                            PasswordHash = "AQAAAAEAACcQAAAAECKfk8fF5yZ4plu8y1vPtzMs/u8dlOOq0zuPKb1uKKDKRuxUFhSb2HUaBFLUEYe0EA==",
                            PhoneNumber = "Bogus.DataSets.PhoneNumbers",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "VJWEG644FKWZHWEQSDTECNTWRMOX3YFN",
                            TwoFactorEnabled = false,
                            UserName = "Sunny_Waters"
                        },
                        new
                        {
                            Id = "fba78b4e-ff35-4a74-b5e6-769a51948b5d",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1964, 6, 28, 9, 54, 41, 767, DateTimeKind.Unspecified).AddTicks(9018),
                            ConcurrencyStamp = "efc45564-59cd-4bcc-a3cd-265b3cb5b6ce",
                            CreationDate = new DateTime(2011, 7, 19, 8, 42, 46, 888, DateTimeKind.Unspecified).AddTicks(6936),
                            Email = "Benton83@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Benton",
                            IsDeleted = true,
                            Lastname = "Osinski",
                            LockoutEnabled = false,
                            NormalizedEmail = "BENTON83@GMAIL.COM",
                            NormalizedUserName = "BENTON_OSINSKI",
                            PasswordHash = "AQAAAAEAACcQAAAAECKfk8fF5yZ4plu8y1vPtzMs/u8dlOOq0zuPKb1uKKDKRuxUFhSb2HUaBFLUEYe0EA==",
                            PhoneNumber = "Bogus.DataSets.PhoneNumbers",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "VJWEG644FKWZHWEQSDTECNTWRMOX3YFN",
                            TwoFactorEnabled = false,
                            UserName = "Benton_Osinski"
                        },
                        new
                        {
                            Id = "a895c874-59d1-40ff-868c-9d9a4a7a1957",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1975, 11, 29, 5, 52, 13, 484, DateTimeKind.Unspecified).AddTicks(2035),
                            ConcurrencyStamp = "efc45564-59cd-4bcc-a3cd-265b3cb5b6ce",
                            CreationDate = new DateTime(2018, 6, 3, 19, 14, 22, 407, DateTimeKind.Unspecified).AddTicks(5900),
                            Email = "Garry_Ryan@hotmail.com",
                            EmailConfirmed = false,
                            Firstname = "Garry",
                            IsDeleted = true,
                            Lastname = "Ryan",
                            LockoutEnabled = false,
                            NormalizedEmail = "GARRY_RYAN@HOTMAIL.COM",
                            NormalizedUserName = "GARRY_RYAN",
                            PasswordHash = "AQAAAAEAACcQAAAAECKfk8fF5yZ4plu8y1vPtzMs/u8dlOOq0zuPKb1uKKDKRuxUFhSb2HUaBFLUEYe0EA==",
                            PhoneNumber = "Bogus.DataSets.PhoneNumbers",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VJWEG644FKWZHWEQSDTECNTWRMOX3YFN",
                            TwoFactorEnabled = false,
                            UserName = "Garry_Ryan"
                        },
                        new
                        {
                            Id = "646cb87b-3078-40b7-9910-6f042aea6390",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1973, 7, 11, 20, 51, 2, 496, DateTimeKind.Unspecified).AddTicks(7749),
                            ConcurrencyStamp = "efc45564-59cd-4bcc-a3cd-265b3cb5b6ce",
                            CreationDate = new DateTime(2017, 7, 30, 1, 13, 56, 633, DateTimeKind.Unspecified).AddTicks(6500),
                            Email = "Felicity.Durgan84@hotmail.com",
                            EmailConfirmed = true,
                            Firstname = "Felicity",
                            IsDeleted = true,
                            Lastname = "Durgan",
                            LockoutEnabled = false,
                            NormalizedEmail = "FELICITY.DURGAN84@HOTMAIL.COM",
                            NormalizedUserName = "FELICITY_DURGAN",
                            PasswordHash = "AQAAAAEAACcQAAAAECKfk8fF5yZ4plu8y1vPtzMs/u8dlOOq0zuPKb1uKKDKRuxUFhSb2HUaBFLUEYe0EA==",
                            PhoneNumber = "Bogus.DataSets.PhoneNumbers",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VJWEG644FKWZHWEQSDTECNTWRMOX3YFN",
                            TwoFactorEnabled = false,
                            UserName = "Felicity_Durgan"
                        },
                        new
                        {
                            Id = "e943557a-81af-457b-b9b6-9cd8fc273b28",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1990, 5, 14, 19, 42, 37, 595, DateTimeKind.Unspecified).AddTicks(5170),
                            ConcurrencyStamp = "efc45564-59cd-4bcc-a3cd-265b3cb5b6ce",
                            CreationDate = new DateTime(2014, 2, 8, 16, 54, 35, 358, DateTimeKind.Unspecified).AddTicks(5384),
                            Email = "Laurence29@yahoo.com",
                            EmailConfirmed = false,
                            Firstname = "Laurence",
                            IsDeleted = true,
                            Lastname = "Abernathy",
                            LockoutEnabled = false,
                            NormalizedEmail = "LAURENCE29@YAHOO.COM",
                            NormalizedUserName = "LAURENCE_ABERNATHY",
                            PasswordHash = "AQAAAAEAACcQAAAAECKfk8fF5yZ4plu8y1vPtzMs/u8dlOOq0zuPKb1uKKDKRuxUFhSb2HUaBFLUEYe0EA==",
                            PhoneNumber = "Bogus.DataSets.PhoneNumbers",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "VJWEG644FKWZHWEQSDTECNTWRMOX3YFN",
                            TwoFactorEnabled = false,
                            UserName = "Laurence_Abernathy"
                        },
                        new
                        {
                            Id = "ffba4dae-5045-4cfc-b6e9-8c2e4cd1e8f9",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1978, 12, 23, 6, 28, 34, 346, DateTimeKind.Unspecified).AddTicks(6695),
                            ConcurrencyStamp = "efc45564-59cd-4bcc-a3cd-265b3cb5b6ce",
                            CreationDate = new DateTime(2018, 12, 6, 10, 30, 25, 864, DateTimeKind.Unspecified).AddTicks(5599),
                            Email = "Stephany92@yahoo.com",
                            EmailConfirmed = true,
                            Firstname = "Stephany",
                            IsDeleted = false,
                            Lastname = "Frami",
                            LockoutEnabled = false,
                            NormalizedEmail = "STEPHANY92@YAHOO.COM",
                            NormalizedUserName = "STEPHANY_FRAMI",
                            PasswordHash = "AQAAAAEAACcQAAAAECKfk8fF5yZ4plu8y1vPtzMs/u8dlOOq0zuPKb1uKKDKRuxUFhSb2HUaBFLUEYe0EA==",
                            PhoneNumber = "Bogus.DataSets.PhoneNumbers",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "VJWEG644FKWZHWEQSDTECNTWRMOX3YFN",
                            TwoFactorEnabled = false,
                            UserName = "Stephany_Frami"
                        },
                        new
                        {
                            Id = "1f9ff0c1-72d5-45b7-9150-b9bf5e4f7c12",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1970, 3, 21, 13, 31, 27, 233, DateTimeKind.Unspecified).AddTicks(3292),
                            ConcurrencyStamp = "efc45564-59cd-4bcc-a3cd-265b3cb5b6ce",
                            CreationDate = new DateTime(2018, 7, 26, 22, 49, 17, 335, DateTimeKind.Unspecified).AddTicks(578),
                            Email = "Chanel_Carroll41@hotmail.com",
                            EmailConfirmed = true,
                            Firstname = "Chanel",
                            IsDeleted = true,
                            Lastname = "Carroll",
                            LockoutEnabled = false,
                            NormalizedEmail = "CHANEL_CARROLL41@HOTMAIL.COM",
                            NormalizedUserName = "CHANEL_CARROLL",
                            PasswordHash = "AQAAAAEAACcQAAAAECKfk8fF5yZ4plu8y1vPtzMs/u8dlOOq0zuPKb1uKKDKRuxUFhSb2HUaBFLUEYe0EA==",
                            PhoneNumber = "Bogus.DataSets.PhoneNumbers",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "VJWEG644FKWZHWEQSDTECNTWRMOX3YFN",
                            TwoFactorEnabled = false,
                            UserName = "Chanel_Carroll"
                        },
                        new
                        {
                            Id = "76c92c3a-11df-4b2f-8e6a-0b3c88844b16",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1964, 2, 7, 1, 17, 9, 207, DateTimeKind.Unspecified).AddTicks(3460),
                            ConcurrencyStamp = "efc45564-59cd-4bcc-a3cd-265b3cb5b6ce",
                            CreationDate = new DateTime(2010, 3, 20, 4, 46, 43, 42, DateTimeKind.Unspecified).AddTicks(8824),
                            Email = "Angeline2@gmail.com",
                            EmailConfirmed = false,
                            Firstname = "Angeline",
                            IsDeleted = false,
                            Lastname = "Wiegand",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANGELINE2@GMAIL.COM",
                            NormalizedUserName = "ANGELINE_WIEGAND",
                            PasswordHash = "AQAAAAEAACcQAAAAECKfk8fF5yZ4plu8y1vPtzMs/u8dlOOq0zuPKb1uKKDKRuxUFhSb2HUaBFLUEYe0EA==",
                            PhoneNumber = "Bogus.DataSets.PhoneNumbers",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "VJWEG644FKWZHWEQSDTECNTWRMOX3YFN",
                            TwoFactorEnabled = false,
                            UserName = "Angeline_Wiegand"
                        },
                        new
                        {
                            Id = "e6bbcaf1-b10d-4635-8c31-0d68bb3736f3",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 4, 21, 21, 10, 37, 989, DateTimeKind.Unspecified).AddTicks(9590),
                            ConcurrencyStamp = "efc45564-59cd-4bcc-a3cd-265b3cb5b6ce",
                            CreationDate = new DateTime(2014, 10, 23, 5, 17, 10, 238, DateTimeKind.Unspecified).AddTicks(9798),
                            Email = "Orion_Sporer@yahoo.com",
                            EmailConfirmed = true,
                            Firstname = "Orion",
                            IsDeleted = false,
                            Lastname = "Sporer",
                            LockoutEnabled = false,
                            NormalizedEmail = "ORION_SPORER@YAHOO.COM",
                            NormalizedUserName = "ORION_SPORER",
                            PasswordHash = "AQAAAAEAACcQAAAAECKfk8fF5yZ4plu8y1vPtzMs/u8dlOOq0zuPKb1uKKDKRuxUFhSb2HUaBFLUEYe0EA==",
                            PhoneNumber = "Bogus.DataSets.PhoneNumbers",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "VJWEG644FKWZHWEQSDTECNTWRMOX3YFN",
                            TwoFactorEnabled = false,
                            UserName = "Orion_Sporer"
                        },
                        new
                        {
                            Id = "3bf4e986-0502-49f8-84d9-d841697995e5",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1967, 10, 25, 15, 53, 18, 0, DateTimeKind.Unspecified).AddTicks(8330),
                            ConcurrencyStamp = "efc45564-59cd-4bcc-a3cd-265b3cb5b6ce",
                            CreationDate = new DateTime(2016, 11, 16, 11, 6, 51, 130, DateTimeKind.Unspecified).AddTicks(9206),
                            Email = "Fritz30@hotmail.com",
                            EmailConfirmed = true,
                            Firstname = "Fritz",
                            IsDeleted = true,
                            Lastname = "Kessler",
                            LockoutEnabled = false,
                            NormalizedEmail = "FRITZ30@HOTMAIL.COM",
                            NormalizedUserName = "FRITZ_KESSLER",
                            PasswordHash = "AQAAAAEAACcQAAAAECKfk8fF5yZ4plu8y1vPtzMs/u8dlOOq0zuPKb1uKKDKRuxUFhSb2HUaBFLUEYe0EA==",
                            PhoneNumber = "Bogus.DataSets.PhoneNumbers",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "VJWEG644FKWZHWEQSDTECNTWRMOX3YFN",
                            TwoFactorEnabled = false,
                            UserName = "Fritz_Kessler"
                        },
                        new
                        {
                            Id = "7a085da8-d9da-48e1-ad98-c04afd1c52af",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2001, 8, 9, 11, 49, 44, 655, DateTimeKind.Unspecified).AddTicks(7244),
                            ConcurrencyStamp = "efc45564-59cd-4bcc-a3cd-265b3cb5b6ce",
                            CreationDate = new DateTime(2014, 10, 10, 16, 10, 24, 309, DateTimeKind.Unspecified).AddTicks(1198),
                            Email = "Reece11@hotmail.com",
                            EmailConfirmed = true,
                            Firstname = "Reece",
                            IsDeleted = true,
                            Lastname = "Effertz",
                            LockoutEnabled = false,
                            NormalizedEmail = "REECE11@HOTMAIL.COM",
                            NormalizedUserName = "REECE_EFFERTZ",
                            PasswordHash = "AQAAAAEAACcQAAAAECKfk8fF5yZ4plu8y1vPtzMs/u8dlOOq0zuPKb1uKKDKRuxUFhSb2HUaBFLUEYe0EA==",
                            PhoneNumber = "Bogus.DataSets.PhoneNumbers",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VJWEG644FKWZHWEQSDTECNTWRMOX3YFN",
                            TwoFactorEnabled = false,
                            UserName = "Reece_Effertz"
                        },
                        new
                        {
                            Id = "e7c4be97-1121-481a-a6ca-c4a502a745c6",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1978, 1, 10, 12, 58, 41, 764, DateTimeKind.Unspecified).AddTicks(1551),
                            ConcurrencyStamp = "efc45564-59cd-4bcc-a3cd-265b3cb5b6ce",
                            CreationDate = new DateTime(2015, 6, 9, 5, 27, 40, 654, DateTimeKind.Unspecified).AddTicks(9094),
                            Email = "Viviane67@yahoo.com",
                            EmailConfirmed = false,
                            Firstname = "Viviane",
                            IsDeleted = false,
                            Lastname = "Fadel",
                            LockoutEnabled = false,
                            NormalizedEmail = "VIVIANE67@YAHOO.COM",
                            NormalizedUserName = "VIVIANE_FADEL",
                            PasswordHash = "AQAAAAEAACcQAAAAECKfk8fF5yZ4plu8y1vPtzMs/u8dlOOq0zuPKb1uKKDKRuxUFhSb2HUaBFLUEYe0EA==",
                            PhoneNumber = "Bogus.DataSets.PhoneNumbers",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "VJWEG644FKWZHWEQSDTECNTWRMOX3YFN",
                            TwoFactorEnabled = false,
                            UserName = "Viviane_Fadel"
                        },
                        new
                        {
                            Id = "0eee7038-6751-45d5-a434-3223ac0546f1",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1988, 6, 6, 23, 18, 46, 180, DateTimeKind.Unspecified).AddTicks(3380),
                            ConcurrencyStamp = "efc45564-59cd-4bcc-a3cd-265b3cb5b6ce",
                            CreationDate = new DateTime(2016, 11, 24, 23, 6, 55, 512, DateTimeKind.Unspecified).AddTicks(4438),
                            Email = "Jaron.Abshire80@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Jaron",
                            IsDeleted = false,
                            Lastname = "Abshire",
                            LockoutEnabled = false,
                            NormalizedEmail = "JARON.ABSHIRE80@GMAIL.COM",
                            NormalizedUserName = "JARON_ABSHIRE",
                            PasswordHash = "AQAAAAEAACcQAAAAECKfk8fF5yZ4plu8y1vPtzMs/u8dlOOq0zuPKb1uKKDKRuxUFhSb2HUaBFLUEYe0EA==",
                            PhoneNumber = "Bogus.DataSets.PhoneNumbers",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VJWEG644FKWZHWEQSDTECNTWRMOX3YFN",
                            TwoFactorEnabled = false,
                            UserName = "Jaron_Abshire"
                        },
                        new
                        {
                            Id = "de37d74b-d253-43da-b3b8-4330f6252df0",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1986, 12, 14, 1, 43, 41, 162, DateTimeKind.Unspecified).AddTicks(856),
                            ConcurrencyStamp = "efc45564-59cd-4bcc-a3cd-265b3cb5b6ce",
                            CreationDate = new DateTime(2013, 5, 1, 20, 8, 56, 661, DateTimeKind.Unspecified).AddTicks(7879),
                            Email = "Meredith_Gleichner@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Meredith",
                            IsDeleted = false,
                            Lastname = "Gleichner",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEREDITH_GLEICHNER@GMAIL.COM",
                            NormalizedUserName = "MEREDITH_GLEICHNER",
                            PasswordHash = "AQAAAAEAACcQAAAAECKfk8fF5yZ4plu8y1vPtzMs/u8dlOOq0zuPKb1uKKDKRuxUFhSb2HUaBFLUEYe0EA==",
                            PhoneNumber = "Bogus.DataSets.PhoneNumbers",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VJWEG644FKWZHWEQSDTECNTWRMOX3YFN",
                            TwoFactorEnabled = false,
                            UserName = "Meredith_Gleichner"
                        },
                        new
                        {
                            Id = "fdb2d0e6-60a1-47b1-b661-d68442ea4ad2",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1967, 1, 28, 7, 47, 45, 593, DateTimeKind.Unspecified).AddTicks(677),
                            ConcurrencyStamp = "efc45564-59cd-4bcc-a3cd-265b3cb5b6ce",
                            CreationDate = new DateTime(2013, 9, 10, 2, 11, 23, 967, DateTimeKind.Unspecified).AddTicks(5331),
                            Email = "Jayne_Williamson@yahoo.com",
                            EmailConfirmed = true,
                            Firstname = "Jayne",
                            IsDeleted = false,
                            Lastname = "Williamson",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAYNE_WILLIAMSON@YAHOO.COM",
                            NormalizedUserName = "JAYNE_WILLIAMSON",
                            PasswordHash = "AQAAAAEAACcQAAAAECKfk8fF5yZ4plu8y1vPtzMs/u8dlOOq0zuPKb1uKKDKRuxUFhSb2HUaBFLUEYe0EA==",
                            PhoneNumber = "Bogus.DataSets.PhoneNumbers",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VJWEG644FKWZHWEQSDTECNTWRMOX3YFN",
                            TwoFactorEnabled = false,
                            UserName = "Jayne_Williamson"
                        },
                        new
                        {
                            Id = "7fab3eab-31f1-46f4-9726-644c9b44f992",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1982, 3, 7, 18, 29, 55, 414, DateTimeKind.Unspecified).AddTicks(1450),
                            ConcurrencyStamp = "efc45564-59cd-4bcc-a3cd-265b3cb5b6ce",
                            CreationDate = new DateTime(2017, 8, 6, 4, 9, 52, 581, DateTimeKind.Unspecified).AddTicks(7388),
                            Email = "Mallory.Nolan37@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Mallory",
                            IsDeleted = true,
                            Lastname = "Nolan",
                            LockoutEnabled = false,
                            NormalizedEmail = "MALLORY.NOLAN37@GMAIL.COM",
                            NormalizedUserName = "MALLORY_NOLAN",
                            PasswordHash = "AQAAAAEAACcQAAAAECKfk8fF5yZ4plu8y1vPtzMs/u8dlOOq0zuPKb1uKKDKRuxUFhSb2HUaBFLUEYe0EA==",
                            PhoneNumber = "Bogus.DataSets.PhoneNumbers",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "VJWEG644FKWZHWEQSDTECNTWRMOX3YFN",
                            TwoFactorEnabled = false,
                            UserName = "Mallory_Nolan"
                        },
                        new
                        {
                            Id = "9536000e-3ddc-452f-8d28-fb784442fdc8",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1972, 8, 16, 23, 40, 9, 163, DateTimeKind.Unspecified).AddTicks(3928),
                            ConcurrencyStamp = "efc45564-59cd-4bcc-a3cd-265b3cb5b6ce",
                            CreationDate = new DateTime(2015, 8, 25, 11, 41, 28, 273, DateTimeKind.Unspecified).AddTicks(5264),
                            Email = "Rosalee0@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Rosalee",
                            IsDeleted = true,
                            Lastname = "Muller",
                            LockoutEnabled = false,
                            NormalizedEmail = "ROSALEE0@GMAIL.COM",
                            NormalizedUserName = "ROSALEE_MULLER",
                            PasswordHash = "AQAAAAEAACcQAAAAECKfk8fF5yZ4plu8y1vPtzMs/u8dlOOq0zuPKb1uKKDKRuxUFhSb2HUaBFLUEYe0EA==",
                            PhoneNumber = "Bogus.DataSets.PhoneNumbers",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "VJWEG644FKWZHWEQSDTECNTWRMOX3YFN",
                            TwoFactorEnabled = false,
                            UserName = "Rosalee_Muller"
                        });
                });

            modelBuilder.Entity("PaperSquare.Core.Models.Identity.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim", (string)null);
                });

            modelBuilder.Entity("PaperSquare.Core.Models.Identity.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin", (string)null);
                });

            modelBuilder.Entity("PaperSquare.Core.Models.Identity.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1a7726f8-de89-465e-a761-6f7597a8d6bd",
                            RoleId = "c2444b71-c794-4e42-8ec9-25a65ff3abeb"
                        },
                        new
                        {
                            UserId = "b5a7f7b0-a408-4bc2-b7a3-4ef6a04a30cd",
                            RoleId = "9709d04b-71b0-4874-9ca1-bc4e70e64298"
                        },
                        new
                        {
                            UserId = "e411687a-67b5-47b7-bac5-443d814341f4",
                            RoleId = "9709d04b-71b0-4874-9ca1-bc4e70e64298"
                        },
                        new
                        {
                            UserId = "ecc02ce1-8fe0-41dc-8daa-52e6f6c8ccb3",
                            RoleId = "c2444b71-c794-4e42-8ec9-25a65ff3abeb"
                        },
                        new
                        {
                            UserId = "fba78b4e-ff35-4a74-b5e6-769a51948b5d",
                            RoleId = "9813ad52-51e2-431b-8116-2e77fdf79b33"
                        },
                        new
                        {
                            UserId = "a895c874-59d1-40ff-868c-9d9a4a7a1957",
                            RoleId = "f6b5c6c9-3f5c-4a91-bc4d-a91825243fba"
                        },
                        new
                        {
                            UserId = "646cb87b-3078-40b7-9910-6f042aea6390",
                            RoleId = "c2444b71-c794-4e42-8ec9-25a65ff3abeb"
                        },
                        new
                        {
                            UserId = "e943557a-81af-457b-b9b6-9cd8fc273b28",
                            RoleId = "9709d04b-71b0-4874-9ca1-bc4e70e64298"
                        },
                        new
                        {
                            UserId = "ffba4dae-5045-4cfc-b6e9-8c2e4cd1e8f9",
                            RoleId = "9709d04b-71b0-4874-9ca1-bc4e70e64298"
                        },
                        new
                        {
                            UserId = "1f9ff0c1-72d5-45b7-9150-b9bf5e4f7c12",
                            RoleId = "f6b5c6c9-3f5c-4a91-bc4d-a91825243fba"
                        },
                        new
                        {
                            UserId = "76c92c3a-11df-4b2f-8e6a-0b3c88844b16",
                            RoleId = "9813ad52-51e2-431b-8116-2e77fdf79b33"
                        },
                        new
                        {
                            UserId = "e6bbcaf1-b10d-4635-8c31-0d68bb3736f3",
                            RoleId = "f6b5c6c9-3f5c-4a91-bc4d-a91825243fba"
                        },
                        new
                        {
                            UserId = "3bf4e986-0502-49f8-84d9-d841697995e5",
                            RoleId = "f6b5c6c9-3f5c-4a91-bc4d-a91825243fba"
                        },
                        new
                        {
                            UserId = "7a085da8-d9da-48e1-ad98-c04afd1c52af",
                            RoleId = "c2444b71-c794-4e42-8ec9-25a65ff3abeb"
                        },
                        new
                        {
                            UserId = "e7c4be97-1121-481a-a6ca-c4a502a745c6",
                            RoleId = "c2444b71-c794-4e42-8ec9-25a65ff3abeb"
                        },
                        new
                        {
                            UserId = "0eee7038-6751-45d5-a434-3223ac0546f1",
                            RoleId = "9813ad52-51e2-431b-8116-2e77fdf79b33"
                        },
                        new
                        {
                            UserId = "de37d74b-d253-43da-b3b8-4330f6252df0",
                            RoleId = "9709d04b-71b0-4874-9ca1-bc4e70e64298"
                        },
                        new
                        {
                            UserId = "fdb2d0e6-60a1-47b1-b661-d68442ea4ad2",
                            RoleId = "9813ad52-51e2-431b-8116-2e77fdf79b33"
                        },
                        new
                        {
                            UserId = "7fab3eab-31f1-46f4-9726-644c9b44f992",
                            RoleId = "9709d04b-71b0-4874-9ca1-bc4e70e64298"
                        },
                        new
                        {
                            UserId = "9536000e-3ddc-452f-8d28-fb784442fdc8",
                            RoleId = "c2444b71-c794-4e42-8ec9-25a65ff3abeb"
                        });
                });

            modelBuilder.Entity("PaperSquare.Core.Models.Identity.UserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("PaperSquare.Core.Models.Identity.RefreshToken", b =>
                {
                    b.HasOne("PaperSquare.Core.Models.Identity.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PaperSquare.Core.Models.Identity.RoleClaim", b =>
                {
                    b.HasOne("PaperSquare.Core.Models.Identity.Role", "Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PaperSquare.Core.Models.Identity.UserClaim", b =>
                {
                    b.HasOne("PaperSquare.Core.Models.Identity.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PaperSquare.Core.Models.Identity.UserLogin", b =>
                {
                    b.HasOne("PaperSquare.Core.Models.Identity.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PaperSquare.Core.Models.Identity.UserRole", b =>
                {
                    b.HasOne("PaperSquare.Core.Models.Identity.Role", "Role")
                        .WithMany("Roles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PaperSquare.Core.Models.Identity.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PaperSquare.Core.Models.Identity.UserToken", b =>
                {
                    b.HasOne("PaperSquare.Core.Models.Identity.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PaperSquare.Core.Models.Identity.Role", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("PaperSquare.Core.Models.Identity.User", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Roles");

                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
